shell.executable("/bin/bash")
shell.prefix("source ~/.bash_profile; ")

""" Snakefile for running 10x pipeline """
# cellranger directory added to .bashrc 

configfile: "config.yaml"

DATA = config["DATA"]
RUN = config["RUN"]
TRANSCRIPTOME = config["TRANSCRIPTOME"]
SAMPLE_SHEET = config["SAMPLE_SHEET"]
PROJECT = config["PROJECT"]
LANES = config["LANES"]
SAMPLES = config["SAMPLES"]
INDICIES = config["INDICIES"]
EXPT_GROUPS = config["EXPT_GROUPS"]

rule all:
    input:
      expand("{data}/raw_data/Stats/DemultiplexingStats.xml",
      data=DATA),
      expand("{sample}_complete.txt", sample = SAMPLES),
      expand("{expt_groups}_aggr_complete.out.txt", expt_groups = EXPT_GROUPS)

def _collect_groups(wildcards):
    
    groups = wildcards.expt_groups
    groups = groups.split(",")
    
    out = open(groups[0] + "_groups_def.csv", 'w')
    out.write("library_id,molecule_h5\n")
    for group in groups: 
        if group is "":
            continue
        library = group.strip(" ")
        path = library + "/outs/molecule_info.h5"
        out.write("{},{}\n".format(library, path))
    
    out.close()
    # return list with group id and path to csv
    return [groups[0][:-1], groups[0] + "_groups_def.csv"]

rule cellranger_aggr:
    input:
      expand("{sample}_complete.txt", sample = SAMPLES),
    output:
      "{expt_groups}_aggr_complete.out.txt"
    params:
      groups = _collect_groups,
      job_name = "aggr",
      memory = "select[mem>4] rusage[mem=4]",
    log: "logs/{expt_groups}_aggr.out"
    threads: 2
    shell:
      """
      set -x
      cellranger aggr \
          --csv={params.groups[1]} \
          --id={params.groups[0]} \
          --jobmode=lsf \
          --maxjobs=30 

      echo "finished" > {output}
      """ 
    

rule cellranger_count:
    """ note that cellranger count will fail if the output directory
    specified with ``--id`` exists prior to running. By default Snakemake 
    will generate directories listed in the input and output params, so to
    avoid this error this rule creates a dummy file "{sample}_complete.txt """
    input:
      "{data}/raw_data/Stats/DemultiplexingStats.xml".format(data=DATA)      
    output:
      "{sample}_complete.txt"
    params:
      indir = "{data}/raw_data/{project}".format(data=DATA, project = PROJECT),
      lanes = LANES,
      job_name = "count",
      memory = "select[mem>4] rusage[mem=4]",
    log: "logs/{sample}_count.out"
    threads: 2
    shell:
      """
      set -x
      cellranger count \
          --id={wildcards.sample} \
          --fastqs={params.indir} \
          --sample={wildcards.sample} \
          --lanes={params.lanes} \
          --jobmode=lsf \
          --project={PROJECT} \
          --maxjobs=30 \
          --transcriptome={TRANSCRIPTOME}
      echo "finished" > {output}
      """ 

rule cellranger_mkfastq:
    input:
      SAMPLE_SHEET 
    output:
      "{data}/raw_data/Stats/DemultiplexingStats.xml"      
    params:
      outdir = "{data}/raw_data/",
      job_name = "count",
      memory = "select[mem>4] rusage[mem=4]",
    log: "{data}/results/logs/count.out"
    threads: 2
    shell:
      """
      module load bcl2fastq
      cellranger mkfastq \
          --run={RUN} \
          --csv={SAMPLE_SHEET} \
          --project={PROJECT} \
          --jobmode=lsf \
          --maxjobs=30 \
          --output-dir {params.outdir} \
          --lanes {LANES} \
          --use-bases-mask Y26n125,I8n8,Y151 \
          --barcode-mismatches 1 
      module unload bcl2fastq
      """

